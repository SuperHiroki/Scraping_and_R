#  python topix100_10.py

#https://self-development.info/%E3%80%90yahoo%E3%83%95%E3%82%A1%E3%82%A4%E3%83%8A%E3%83%B3%E3%82%B9%E3%80%91%E6%A0%AA%E4%BE%A1%E6%99%82%E7%B3%BB%E5%88%97%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4/

from asyncio.windows_events import NULL
from pickle import TRUE
import sys
import bs4
import traceback
import re
import time
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains

import locale
import pandas as pd
import numpy as np

import os

import copy

from selenium.common.exceptions import TimeoutException
import traceback

encoding = locale.getpreferredencoding()
print(encoding)                                                                               ###print
print('kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk')                                                  ###print

########################################################################
########################################################################実行するとき、このファイル名を間違いないように。
########################################################################ここを自由に変更する。あと、銘柄の確認(treated units とcontrol unitsの両方)、csv出力の確認を忘れずに。
# ドライバーのフルパス
CHROMEDRIVER = "chromedriver.exeのパス" 
# 改ページ（最大）
PAGE_MAX = 10
# 遷移間隔（秒）
INTERVAL_TIME = 1.5
INTERVAL_TIME_SHORT = 0.1
# 開始年・月・日
sd=20211022#営業日としてあるのかを確認する必要なし。#休みがあるので少し長めに取る。
# 終了年・月・日
ed=20220123#営業日としてあるのかを確認する必要なし。#休みがあるので少し長めに取る。
#イベント日
event_year=2021
event_day_for_minkabu=20211130#営業日としてあるのかを確認する必要あり。#per,pbr取得のため。
event_day=20211207
#みんかぶからper,pbrを取得するため。
#p1の先頭>20221027, p5>20220630, p10>20220201, p15>20210903, p20>20210406, p25>20201110, p30>20200610, p35>20200115, p40>20190809, p45>20190314, p48>20181211, p50>20181011, p55>20180522, p60>20171218
try_page_at_minkabu_perpbr=12
# タイプ(d:デイリー、w:週刊、m:月間）
TM = "d"
########################################################################
########################################################################
########################################################################


# ドライバー準備
def get_driver():
    # ヘッドレスモードでブラウザを起動
    options = Options()
    options.add_argument('--headless')
 
    # ブラウザーを起動
    driver = webdriver.Chrome(os.path.join("C:\\"  , "chromedriver.exe")   ,options=options)
 
    return driver
 
 
# 対象ページのソース取得
def get_source_from_page(driver, page):
    try:
        # ターゲット
        driver.get(page)
        driver.implicitly_wait(10)  # 見つからないときは、10秒まで待つ
        page_source = driver.page_source
 
        return page_source
 
    except Exception as e:
 
        print(e)
 
        return None

# ソースからスクレイピングする
def get_data_from_source(src):
    # スクレイピングする
    soup = bs4.BeautifulSoup(src, features='lxml')
    try:
        info = []
        table = soup.find("table", class_="tjCjeiMn _1aNPcH77")#1375はこの時点でエラーが起きてくれる。いや、エラーは起きないわ。だから、1375は空のリストが返される。       
        
        if table:
            elems = table.find_all("tr")
            print(len(elems))                                                                               ###print                                     
 
            for elem in elems:
                td_tags = elem.find_all("td") 
                th_tag = elem.find_all("th")       

                if len(td_tags)==1:#1414みたいに株価分割などがあると、tdタグが一つだけになる。その会社のリストを空にしたい。
                    info=[]
                    break
                else:
                    nanimosinai=1 

                if len(td_tags) > 0:
                    row_info = []
                    nentukihi=th_tag[0].text                    
                    date_group = re.search('(\d+)\D(\d+)\D(\d+)\D' ,  nentukihi  )
                    year_mae=date_group.group(1)
                    month_mae=date_group.group(2)
                    day_mae=date_group.group(3)
                    year=year_mae
                    if len(month_mae)==2:
                        month=month_mae
                    else:
                        month='0'+ month_mae
                    if len(day_mae)==2:
                        day=day_mae
                    else:
                        day='0'+ day_mae
                    date=year+'-'+month+'-'+day                #2020-09-09みたいにする。
                    row_info.append(date)
                    tmp_counter = 0                                   
                    for td_tag in td_tags:
                        tmp_counter=tmp_counter+1
                        tmp_text = td_tag.text
                        if tmp_counter==  4:     #終値。
                            tmp_text = extract_num(tmp_text)      
                            row_info.append(tmp_text)
                        else:
                            nanimosinai=1
 
                    info.append(row_info)       
 
        return info
 
    except Exception as e:
 
        print(e)
 
        return None

# 次のページへ遷移
def next_btn_click(driver):
    try:
        # 次へボタン
        elem_btn = WebDriverWait(driver, 10).until(                   
            EC.visibility_of_element_located((By.XPATH, '//button/span[contains(text(),"次へ")]') )  
        )

        #最後のページに行った時、そのページが何度もスクレイピングされる現象が起きてしまう。たぶん、最後のページでは「次へ」のボタンを押すことはできるが、リンクがないから移動しない。これはTrueで返されてしまう。意図的にエラーを引き起こす。
        kensuu_id=driver.find_element(By.ID, "pagerbtm") 
        kensuu_tagp=kensuu_id.find_element(By.TAG_NAME, "p") 
        kensuu_text=kensuu_tagp.text
        print(kensuu_text)                                                       ###print
        kensuu_list=re.search('(\d+)\D(\d+)/(\d+)\D', kensuu_text)                                                   
        if kensuu_list.group(2)==kensuu_list.group(3):
            elem_btn='error'
        else:
            nanimosinai=1

        # クリック処理
        actions = ActionChains(driver)
        actions.move_to_element(elem_btn)
        actions.click(elem_btn)
        actions.perform()

        # 間隔を設ける(秒単位）
        time.sleep(INTERVAL_TIME)
        
        print('True')                                                                       ###print
        return True

    except TimeoutException as e:
        print("TimeoutException")
        return False

    except Exception as e:

        print(e)
        
        print('False')                                                                      ###print
        return False

import re
# 数値だけ抽出
def extract_num(val):
    num = None
    if val:
        match=re.search('((([1-9]\d*)(,\d{3})*)|0)(\.\d+)?', val)#5,678.5みたいなカンマがある数字に対しても対応できるように。
        if match:
            num=re.sub("\,", "", match.group(0))
        else:
            match2=re.search('\d+(\.\d+)?', val)
            if match2:
                num=match2.group(0)
            else:
                num = "na"
 
    if not num:
        num = "na"
 
    return num
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
if __name__ == "__main__":
    if 'topix'=='not':
        meigaralist_control_units= ['1301', '1332', '1333', '1375', '1376', '1377', '1379', '1384', '1414', '1417', '1419', '1420', '1429', '1430', '1433', '1435', '1446', '1514', '1515', '1518', '1605', '1662', '1663', '1712', '1716', '1717', '1719', '1720', '1721', '1726', '1762', '1766', '1768', '1780', '1786', '1801', '1802', '1803', '1805', '1808', '1810', '1811', '1812', '1813', '1814', '1815', '1820', '1821', '1822', '1826', '1827', '1833', '1835', '1847', '1848', '1852', '1860', '1861', '1866', '1867', '1870', '1871', '1873', '1878', '1879', '1882', '1884', '1885', '1887', '1888', '1890', '1893', '1898', '1899', '1909', '1911', '1914', '1921', '1925', '1926', '1928', '1929', '1930', '1934', '1938', '1939', '1941', '1942', '1944', '1945', '1946', '1949', '1950', '1951', '1952', '1954', '1959', '1961', '1963', '1964', '1967', '1968', '1969', '1972', '1973', '1975', '1976', '1979', '1980', '1982', '2001', '2002', '2003', '2004', '2009', '2053', '2060', '2107', '2108', '2109', '2112', '2117', '2120', '2121', '2124', '2127', '2130', '2139', '2146', '2148', '2153', '2154', '2157', '2163', '2168', '2169', '2170', '2175', '2180', '2181', '2183', '2193', '2196', '2198', '2201', '2204', '2206', '2207', '2209', '2211', '2212', '2215', '2217', '2220', '2222', '2229', '2264', '2266', '2267', '2269', '2270', '2281', '2282', '2286', '2288', '2292', '2294', '2296', '2301', '2305', '2307', '2309', '2311', '2317', '2325', '2326', '2327', '2331', '2335', '2337', '2352', '2353', '2359', '2371', '2372', '2374', '2376', '2378', '2379', '2384', '2389', '2395', '2410', '2412', '2413', '2418', '2424', '2427', '2428', '2429', '2432', '2433', '2440', '2445', '2453', '2461', '2462', '2464', '2471', '2475', '2477', '2485', '2487', '2489', '2491', '2492', '2501', '2502', '2503', '2531', '2533', 
        '2540', '2579', '2587', '2590', '2593', '2594', '2597', '2599', '2602', '2607', '2612', '2613', '2651', '2659', '2664', '2670', '2674', '2676', '2678', '2681', '2685', '2686', '2687', '2689', '2692', '2695', '2698', '2715', '2722', '2726', '2730', '2733', '2734', '2735', '2737', '2742', '2749', '2752', '2753', '2760', '2764', '2767', '2768', '2784', '2791', '2792', '2796', '2801', '2802', '2804', '2809', '2810', '2811', '2812', '2815', '2818', '2819', '2820', '2871', '2874', '2875', '2882', '2883', '2884', '2897', '2899', '2904', '2908', '2910', '2914', '2915', '2918', '2922', '2924', '2925', '2929', '2930', '2931', '2933', '2975', '2980', '2982', '3001', '3002', '3003', '3004', '3023', '3028', '3030', '3031', '3034', '3036', '3038', '3040', '3046', '3048', '3050', '3053', '3054', '3064', '3067', '3073', '3076', '3079', '3082', '3085', '3086', '3087', '3088', '3091', '3092', '3093', '3097', '3099', '3101', '3103', '3104', '3105', '3106', '3107', '3109', '3110', '3116', '3132', '3134', '3135', '3139', '3141', '3148', '3150', '3151', '3153', '3154', '3156', '3157', '3159', '3160', '3166', '3167', '3168', '3169', '3172', '3173', '3175', '3176', '3178', '3179', '3180', '3182', '3183', '3186', '3191', '3193', '3196', '3197', '3198', '3199', '3201', '3202', '3204', '3205', '3221', '3222', '3228', '3231', '3232', '3244', '3245', '3246', '3252', '3254', '3267', '3271', '3275', '3276', '3277', '3280', '3284', '3288', '3289', '3291', '3294', '3299', '3302', '3315', '3319', '3321', '3328', '3333', '3341', '3349', '3360', '3361', '3371', '3382', '3387', '3388', '3391', '3392', '3393', '3395', '3396', '3397', '3401', '3402', '3405', '3407', '3415', '3421', '3431', '3433', '3434', '3436', '3443', '3445', '3446', '3447', '3452', '3454', '3457', '3458', '3464', '3465', '3467', '3475', 
        '3480', '3482', '3484', '3486', '3489', '3501', '3512', '3513', '3521', '3524', '3526', '3529', '3538', '3539', '3543', '3544', '3546', '3547', '3548', '3549', '3551', '3553', '3559', '3561', '3563', '3565', '3569', '3571', '3577', '3580', '3591', '3593', '3607', '3608', '3611', '3612', '3626', '3627', '3632', '3633', '3635', '3636', '3639', '3640', '3648', '3649', '3655', '3656', '3657', '3659', '3660', '3661', '3662', '3665', '3666', '3667', '3668', '3672', '3673', '3675', '3676', '3677', '3678', '3679', '3681', '3682', '3683', '3686', '3687', '3688', '3694', '3696', '3697', '3708', '3738', '3741', '3762', '3763', '3765', '3769', '3770', '3771', '3774', '3778', '3784', '3788', '3817', '3826', '3834', '3835', '3836', '3837', '3839', '3843', '3844', '3852', '3853', '3854', '3861', '3863', '3864', '3865', '3877', '3878', '3880', '3896', '3901', '3902', '3903', '3909', '3912', '3915', '3916', '3918', '3919', '3920', '3921', '3922', '3923', '3924', '3925', '3926', '3928', '3932', '3934', '3937', '3939', '3940', '3941', '3946', '3950', '3962', '3963', '3964', '3965', '3968', '3969', '3978', '3981', '3983', '3984', '3985', '3992', '3994', '3996', '4004', '4005', '4008', '4021', '4022', '4023', '4025', '4027', '4028', '4031', '4041', '4042', '4043', '4044', '4045', '4046', '4047', '4061', '4062', '4063', '4064', '4072', '4078', '4082', '4088', '4091', '4092', '4093', '4095', '4097', '4098', '4099', '4100', '4109', '4112', '4114', '4116', '4118', '4151', '4182', '4183', '4185', '4186', '4187', '4188', '4189', '4202', '4203', '4204', '4205', '4206', '4208', '4212', '4215', '4216', '4218', '4220', '4221', '4228', '4229', '4231', '4238', '4245', '4246', '4248', '4249', '4251', '4272', '4275', '4284', '4286', '4290', '4295', '4298', '4299', '4301', '4307', '4310', '4312', '4318',
        '4319', '4320', '4323', '4324', '4326', '4331', '4333', '4337', '4343', '4344', '4345', '4346', '4348', '4350', '4362', '4368', '4369', '4373', '4382', '4384', '4385', '4390', '4392', '4396', '4401', '4403', '4404', '4406', '4410', '4420', '4423', '4430', '4432', '4433', '4434', '4439', '4440', '4441', '4443', '4446', '4449', '4452', '4461', '4462', '4463', '4465', '4471', '4481', '4483', '4502', '4503', '4506', '4507', '4512', '4516', '4519', '4521', '4523', '4526', '4527', '4528', '4530', '4531', '4534', '4536', '4538', '4539', '4540', '4541', '4543', '4544', '4547', '4548', '4549', '4550', '4551', '4552', '4553', '4554', '4559', '4568', '4569', '4574', '4577', '4578', '4581', '4587', '4611', '4612', '4613', '4615', '4617', '4619', '4620', '4626', '4631', '4633', '4634', '4636', '4641', '4651', '4653', '4658', '4661', '4662', '4665', '4666', '4668', '4671', '4674', '4676', '4678', '4679', '4680', '4681', '4684', '4686', '4687', '4689', '4694', '4704', '4708', '4709', '4714', '4716', '4718', '4719', '4722', '4725', '4726', '4728', '4732', '4733', '4739', '4743', '4745', '4746', '4751', '4755', '4762', '4763', '4765', '4767', '4768', '4776', '4792', '4801', '4809', '4812', '4813', '4819', '4820', '4825', '4826', '4828', '4829', '4839', '4845', '4847', '4848', '4849', '4886', '4887', '4901', '4902', '4911', '4912', '4914', '4917', '4919', '4921', '4922', '4923', '4926', '4927', '4928', '4929', '4931', '4951', '4955', '4956', '4958', '4963', '4967', '4968', '4971', '4973', '4974', '4975', '4977', '4979', '4980', '4985', '4992', '4994', '4996', '4997', '5009', '5011', '5013', '5015', '5017', '5018', '5019', '5020', '5021', '5074', '5076', '5101', '5105', '5108', '5110', '5121', '5122', '5142', '5185', '5186', '5187', '5191', '5192', '5195', '5201', '5202', '5204', '5208', 
        '5210', '5214', '5218', '5232', '5233', '5261', '5262', '5269', '5273', '5288', '5301', '5302', '5310', '5331', '5332', '5333', '5334', '5337', '5344', '5351', '5352', '5357', '5363', '5367', '5384', '5388', '5391', '5393', '5401', '5406', '5408', '5410', '5411', '5423', '5440', '5444', '5445', '5449', '5451', '5463', '5464', '5471', '5476', '5480', '5481', '5482', '5486', '5491', '5541', '5563', '5602', '5603', '5612', '5631', '5632', '5658', '5659', '5698', '5702', '5703', '5706', '5707', '5711', '5713', '5714', '5715', '5721', '5726', '5727', '5741', '5757', '5801', '5802', '5803', '5805', '5807', '5809', '5819', '5821', '5851', '5852', '5857', '5901', '5902', '5909', '5911', '5915', '5923', '5929', '5930', '5932', '5933', '5936', '5938', '5942', '5943', '5946', '5947', '5949', '5951', '5957', '5958', '5959', '5970', '5975', '5976', '5981', '5985', '5986', '5988', '5989', '5991', '5992', '5998', '6005', '6013', '6028', '6029', '6032', '6035', '6036', '6037', '6044', '6047', '6048', '6050', '6054', '6055', '6058', '6059', '6062', '6070', '6071', '6073', '6078', '6080', '6082', '6083', '6087', '6088', '6089', '6093', '6095', '6096', '6098', '6099', '6101', '6103', '6104', '6113', '6118', '6121', '6134', '6135', '6136', '6138', '6140', '6141', '6143', '6146', '6151', '6157', '6165', '6167', '6171', '6175', '6178', '6183', '6184', '6185', '6186', '6189', '6191', '6194', '6196', '6197', '6199', '6200', '6201', '6203', '6205', '6208', '6210', '6217', '6218', '6222', '6235', '6236', '6237', '6238', '6240', '6247', '6250', '6254', '6258', '6262', '6264', '6266', '6268', '6269', '6272', '6273', '6277', '6278', '6282', '6284', '6287', '6289', '6291', '6292', '6293', '6294', '6298', '6301', '6302', '6305', '6306', '6309', '6310', '6315', '6316', '6317', '6319', '6323', '6325', 
        '6326', '6328', '6330', '6331', '6332', '6333', '6335', '6339', '6340', '6345', '6349', '6351', '6355', '6356', '6358', '6361', '6362', '6363', '6364', '6367', '6368', '6369', '6370', '6371', '6373', '6376', '6378', '6379', '6381', '6383', '6387', '6390', '6393', '6395', '6406', '6407', '6409', '6412', '6413', '6417', '6418', '6419', '6420', '6428', '6430', '6432', '6436', '6440', '6444', '6445', '6448', '6454', '6455', '6457', '6458', '6459', '6460', '6461', '6462', '6463', '6464', '6465', '6470', '6471', '6472', '6473', '6474', '6479', '6480', '6481', '6482', '6485', '6486', '6489', '6490', '6498', '6501', '6502', '6503', '6504', '6505', '6506', '6507', '6508', '6513', '6516', '6517', '6523', '6532', '6533', '6535', '6538', '6539', '6540', '6544', '6546', '6547', '6551', '6552', '6555', '6556', '6560', '6564', '6569', '6571', '6572', '6584', '6586', '6588', '6590', '6592', '6594', '6615', '6616', '6617', '6619', '6620', '6622', '6630', '6632', '6638', '6640', '6641', '6644', '6645', '6651', '6652', '6653', '6654', '6674', '6675', '6676', '6678', '6699', '6701', '6702', '6703', '6704', '6706', '6707', '6715', '6718', '6723', '6724', '6727', '6728', '6730', '6737', '6740', '6741', '6742', '6744', '6745', '6748', '6750', '6752', '6753', '6754', '6755', '6758', '6762', '6763', '6768', '6770', '6771', '6779', '6785', '6787', '6788', '6789', '6794', '6798', '6800', '6803', '6804', '6806', '6807', '6809', '6810', '6814', '6815', '6817', '6820', '6823', '6826', '6841', '6844', '6845', '6848', '6849', '6850', '6853', '6855', '6856', '6857', '6858', '6859', '6861', '6866', '6869', '6871', '6875', '6877', '6879', '6901', '6902', '6904', '6905', '6908', '6914', '6915', '6920', '6923', '6924', '6925', '6926', '6927', '6928', '6929', '6932', '6937', '6938', '6941', '6947', '6951', 
        '6952', '6954', '6958', '6961', '6962', '6963', '6965', '6966', '6967', '6971', '6973', '6976', '6981', '6986', '6988', '6989', '6995', '6996', '6997', '6999', '7003', '7004', '7011', '7012', '7013', '7014', '7022', '7030', '7033', '7034', '7035', '7037', '7038', '7044', '7059', '7060', '7085', '7088', '7092', '7102', '7105', '7122', '7127', '7128', '7130', '7135', '7148', '7150', '7161', '7164', '7167', '7172', '7173', '7180', '7181', '7182', '7183', '7184', '7186', '7187', '7189', '7191', '7192', '7196', '7198', '7199', '7201', '7202', '7203', '7205', '7211', '7212', '7213', '7214', '7215', '7220', '7222', '7224', '7226', '7231', '7236', '7238', '7239', '7240', '7241', '7242', '7244', '7245', '7246', '7247', '7250', '7256', '7259', '7261', '7266', '7267', '7269', '7270', '7271', '7272', '7276', '7277', '7278', '7280', '7282', '7283', '7284', '7291', '7294', '7296', '7305', '7309', '7313', '7322', '7327', '7337', '7347', '7350', '7354', '7358', '7366', '7380', '7381', '7383', '7384', '7408', '7414', '7416', '7417', '7419', '7420', '7421', '7427', '7433', '7438', '7442', '7445', '7447', '7451', '7453', '7455', '7456', '7458', '7459', '7463', '7466', '7467', '7475', '7476', '7480', '7481', '7482', '7483', '7487', '7494', '7504', '7506', '7508', '7510', '7512', '7513', '7514', '7516', '7518', '7520', '7522', '7524', '7525', '7527', '7532', '7537', '7545', '7550', '7552', '7554', '7561', '7570', '7575', '7581', '7590', '7593', '7595', '7596', '7599', '7600', '7601', '7605', '7606', '7607', '7608', '7609', '7611', '7613', '7615', '7616', '7618', '7619', '7628', '7630', '7637', '7640', '7646', '7649', '7673', '7679', '7701', '7702', '7709', '7715', '7717', '7718', '7721', '7723', '7725', '7727', '7729', '7730', '7731', '7732', '7733', '7734', '7735', '7739', '7740', '7741', 
        '7743', '7744', '7745', '7747', '7751', '7752', '7762', '7769', '7775', '7780', '7782', '7811', '7816', '7817', '7818', '7819', '7820', '7821', '7822', '7823', '7832', '7833', '7838', '7839', '7840', '7844', '7846', '7856', '7860', '7864', '7867', '7868', '7872', '7874', '7885', '7888', '7893', '7897', '7898', '7905', '7908', '7911', '7912', '7914', '7915', '7916', '7917', '7918', '7921', '7925', '7931', '7936', '7937', '7940', '7942', '7943', '7944', '7947', '7949', '7951', '7952', '7955', '7956', '7958', '7961', '7962', '7965', '7966', '7970', '7971', '7972', '7974', '7976', '7979', '7981', '7984', '7987', '7988', '7989', '7990', '7994', '7995', '7999', '8001', '8002', '8005', '8007', '8008', '8011', '8012', '8013', '8014', '8015', '8016', '8018', '8020', '8022', '8025', '8029', '8031', '8032', '8035', '8037', '8038', '8041', '8043', '8050', '8051', '8052', '8053', '8056', '8057', '8058', '8059', '8060', '8061', '8065', '8068', '8070', '8074', '8075', '8077', '8078', '8079', '8081', '8084', '8086', '8088', '8089', '8091', '8093', '8095', '8096', '8097', '8098', '8101', '8103', '8104', '8107', '8111', '8113', '8114', '8118', '8125', '8127', '8129', '8130', '8131', '8132', '8133', '8136', '8137', '8140', '8141', '8142', '8150', '8151', '8153', '8154', '8155', '8157', '8158', '8159', '8160', '8163', '8165', '8166', '8167', '8168', '8173', '8174', '8179', '8181', '8182', '8185', '8194', '8200', '8203', '8207', '8214', '8217', '8218', '8219', '8227', '8230', '8233', '8237', '8242', '8244', '8252', '8253', '8255', '8260', '8267', '8273', '8275', '8276', '8278', '8279', '8281', '8282', '8283', '8285', '8289', '8291', '8303', '8304', '8306', '8308', '8309', '8316', '8331', '8334', '8336', '8337', '8338', '8341', '8343', '8344', '8345', '8346', '8349', '8354', '8355', '8358', 
        '8359', '8360', '8361', '8362', '8364', '8365', '8366', '8367', '8368', '8369', '8370', '8377', '8381', '8382', '8383', '8385', '8386', '8387', '8388', '8392', '8393', '8395', '8399', '8410', '8411', '8416', '8418', '8424', '8425', '8439', '8473', '8511', '8515', '8518', '8521', '8522', '8524', '8527', '8530', '8537', '8541', '8542', '8544', '8550', '8551', '8558', '8562', '8563', '8566', '8570', '8572', '8584', '8585', '8591', '8593', '8595', '8596', '8600', '8601', '8604', '8609', '8613', '8614', '8616', '8617', '8622', '8624', '8628', '8630', '8697', '8698', '8706', '8707', '8708', '8713', '8714', '8715', '8725', '8732', '8739', '8742', '8750', '8766', '8769', '8771', '8772', '8793', '8795', '8798', '8801', '8802', '8803', '8804', '8818', '8830', '8835', '8841', '8842', '8848', '8850', '8860', '8864', '8869', '8871', '8876', '8877', '8881', '8892', '8897', '8904', '8905', '8908', '8917', '8918', '8919', '8920', '8923', '8928', '8934', '8935', '8940', '8944', '8945', '8999', '9001', '9003', '9005', '9006', '9007', '9008', '9009', '9010', '9014', '9020', '9021', '9022', '9024', '9025', '9031', '9037', '9039', '9041', '9042', '9044', '9045', '9046', '9048', '9052', '9055', '9058', '9064', '9065', '9066', '9067', '9068', '9069', '9070', '9072', '9074', '9075', '9076', '9078', '9081', '9086', '9090', '9099', '9101', '9104', '9107', '9110', '9115', '9119', '9130', '9142', '9143', '9147', '9201', '9202', '9216', '9232', '9247', '9248', '9260', '9262', '9265', '9267', '9273', '9274', '9275', '9278', '9279', '9301', '9302', '9303', '9304', '9305', '9306', '9308', '9310', '9312', '9319', '9322', '9324', '9325', '9351', '9364', '9366', '9368', '9369', '9380', '9381', '9384', '9385', '9386', '9401', '9404', '9405', '9409', '9412', '9413', '9414', '9416', '9417', '9418', '9419', 
        '9422', '9424', '9428', '9432', '9433', '9434', '9435', '9438', '9449', '9450', '9466', '9468', '9470', '9474', '9475', '9479', '9501', '9502', '9503', '9504', '9505', '9506', '9507', '9508', '9509', '9511', '9513', '9514', '9517', '9519', '9531', '9532', '9533', '9534', '9535', '9536', '9543', '9551', '9600', '9601', '9602', '9603', '9605', '9612', '9613', '9616', '9619', '9621', '9622', '9627', '9628', '9629', '9632', '9633', '9644', '9658', '9663', '9672', '9675', '9678', '9682', '9684', '9692', '9697', '9699', '9702', '9704', '9706', '9715', '9716', '9717', '9719', '9722', '9726', '9728', '9729', '9731', '9735', '9739', '9740', '9742', '9743', '9744', '9746', '9749', '9755', '9757', '9759', '9760', '9763', '9765', '9766', '9768', '9769', '9783', '9787', '9788', '9790', '9793', '9795', '9810', '9824', '9828', '9830', '9831', '9832', '9837', '9842', '9843', '9850', '9854', '9856', '9861', '9869', '9872', '9880', '9882', '9887', '9889', '9896', '9900', '9902', '9919', '9928', '9930', '9932', '9934', '9936', '9945', '9946', '9948', '9956', '9960', '9962', '9972', '9974', '9979', '9982', '9983', '9984', '9986', '9987', '9989', '9990', '9991', '9993', '9994', '9995', '9997']#topix
    if 'topix100'=='not':
        meigaralist_control_units= ['1925', '6954', '1928', '6971', '2413', '6981', '2502', '7011', '2503', '7201', '2802', '7203', '2914', '7267', '3382', '7269', '3402', '7270', '3407', '7309', '4063', '7733', '4188', '7741', '4452', '7751', '4502', '7832', '4503', '7974', '4507', '8001', '4519', '8002', '4523', '8031', '4528', '8035', '4543', '8053', '4568', '8058', '4578', '8113', '4661', '8267', '4689', '8306', '4901', '8308', '4911', '8309', '5020', '8316', '5108', '8411', '5401', '8591', '5713', '8601', '5802', '8604', '6098', '8630', '6178', '8697', '6273', '8725', '6301', '8750', '6326', '8766', '6367', '8801', '6501', '8802', '6502', '8830', '6503', '9020', '6586', '9021', '6594', '9022', '6645', '9202', '6702', '9432', '6752', '9433', '6758', '9434', '6861', '9735', '6869', '9843', '6902', '9983', '6920', '9984']#topix100
    if 'nikkei225'=='nikkei225':    
        meigaralist_control_units= ['1332', '1605', '1721', '1801', '1802', '1803', '1808', '1812', '1925', '1928', '1963', '2002', '2269', '2282', '2413', '2432', '2501', '2502', '2503', '2531', '2768', '2801', '2802', '2871', '2914', '3086', '3099', '3101', '3289', '3382', '3401', '3402', '3405', '3407', '3436', '3659', '3861', '3863', '4004', '4005', '4021', '4042', '4043', '4061', '4063', '4151', '4183', '4188', '4208', '4324', '4452', '4502', '4503', '4506', '4507', '4519', '4523', '4543', '4568', '4578', '4631', '4689', '4704', '4751', '4755', '4901', '4902', '4911', '5019', '5020', '5101', '5108', '5201', '5202', '5214', '5232', '5233', '5301', '5332', '5333', '5401', '5406', '5411', '5541', '5631', '5703', '5706', '5707', '5711', '5713', '5714', '5801', '5802', '5803', '5831', '6098', '6103', '6113', '6178', '6273', '6301', '6302', '6305', '6326', '6361', '6367', '6471', '6472', '6473', '6479', '6501', '6503', '6504', '6506', '6594', '6645', '6674', '6701', '6702', '6724', '6752', '6753', '6758', '6762', '6770', '6841', '6857', '6861', '6902', '6952', '6954', '6971', '6976', '6981', '6988', '7003', '7004', '7011', '7012', '7013', '7186', '7201', '7202', '7203', '7205', '7211', '7261', '7267', '7269', '7270', '7272', '7731', '7733', '7735', '7741', '7751', '7752', '7762', '7832', '7911', '7912', '7951', '7974', '8001', '8002', '8015', '8031', '8035', '8053', '8058', '8233', '8252', '8253', '8267', '8304', '8306', '8308', '8309', '8316', '8331', '8354', '8411', '8591', '8601', '8604', '8628', '8630', '8697', '8725', '8750', '8766', '8795', '8801', '8802', '8804', '8830', '9001', '9005', '9007', '9008', '9009', '9020', '9021', '9022', '9062', '9064', '9101', '9104', '9107', '9202', '9301', '9432', '9433', '9434', '9501', '9502', '9503', '9531', '9532', '9602', '9613', '9735', '9766', '9983', '9984']#nikkei225
    meigaralist_treated_units=['5949']  
    meigaralist=meigaralist_treated_units + meigaralist_control_units
    #meigaralist=['5108','1414','1375']                     #お試し。meigaralistを少し変えたので後で治すこと。 
    #meigaralist=['1822']
    #meigaralist=['5108', '2108']
    #meigaralist=['5108', '2352']
    #meigaralist=['4528']
    #meigaralist=['5831']
    #meigaralist=['6366','7911'] 
    df = pd.DataFrame({
        'index_k': [],
        'company_code': [],
        'company_name':[],
        'date': [],
        'stock_price': [],
        'foreign_demand':[],
        'equity_ratio':[],
        'per':[],
        'pbr':[],
        'type_of_industry':[], #分析には使わないけど一応
        'type_of_market':[],    #分析には使わないけど一応
        'accounting_period':[],
        'market_capitalization':[],
        'trading_value':[]
        })
    meigara_counter=0
    meigaralist_error=[]#1375は上場が遅いため株価データがない。1414は株価分割を行ったためうまくデータを取得できない(取得できたとしても意味をなさない)。
    for meigara in meigaralist:   #銘柄の繰り返し。
        meigara_counter=meigara_counter+1
        print(meigara_counter)                                                                                  ###print
        print(meigara)                                                                                         ###print
        ######################################################################################
        ######################################################################################
        ######################################################################################
        #株価の時系列
        page = "https://finance.yahoo.co.jp/quote/" + meigara
        page = page + '.T/history?from=' + str(sd)
        page = page + '&to=' + str(ed) 
        page = page + '&timeFrame=' + str(TM) + '&page=1'
        driver = get_driver()
        source = get_source_from_page(driver, page)
        result_flg = True
        page_counter = 0
        index_k= 0
        date_and_stockprice_of_one_meigara=[]
        while result_flg:   #pageの繰り返し。
            page_counter = page_counter + 1
            data = get_data_from_source(source)   #ここでそのページの年月日と株価のリストができる。[['2022年9月16日', '5029'], ['2022年9月15日', '5090'], ['2022年9月14日', '5071'], ['2022年9月13日', '5270'], ['2022年9月12日', '5226'], ['2022年9月9日', '5204'], ['2022年9月8日', '5252'], ['2022年9月7日', '5160'], ['2022年9月6日', '5188'], ['2022年9月5日', '5205'], ['2022年9月2日', '5228'], ['2022年9月1日', '5234'], ['2022年8月31日', '5353'], ['2022年8月30日', '5379'], ['2022年8月29日', '5380'], ['2022年8月26日', '5485'], ['2022年8月25日', '5432'], ['2022年8月24日', '5430'], ['2022年8月23日', '5352'], ['2022年8月22日', '5460']]
            if data==None or data==[]:#1414と1375への対処。
                print('jikeiretu_data_not_well_get')                                            ###print
                date_and_stockprice_of_one_meigara=[]
                break  
            date_and_stockprice_of_one_meigara.extend(data) 
            if page_counter == PAGE_MAX:
                break
 
            result_flg = next_btn_click(driver)     
            source = driver.page_source
        
        ######################################################################################
        ######################################################################################
        ######################################################################################

        #company_name, foreign_demand, equity_ratio, per, pbr, type_of_industry, type_of_market, accounting_period, jikasougaku, baibai
        #########################################################################################################
        #company_name, foreign_demand, type_of_industry, type_of_market, accounting_period
        time.sleep(INTERVAL_TIME)
        page_foreigndemand_typeofindustry_typeofmarket = "https://finance.yahoo.co.jp/quote/" + meigara + ".T/profile"
        driver_foreigndemand_typeofindustry_typeofmarket  = get_driver()
        source_foreigndemand_typeofindustry_typeofmarket = get_source_from_page(driver_foreigndemand_typeofindustry_typeofmarket, page_foreigndemand_typeofindustry_typeofmarket) 
        soup = bs4.BeautifulSoup(source_foreigndemand_typeofindustry_typeofmarket, features='lxml')
        #company_name
        time.sleep(INTERVAL_TIME_SHORT)
        data_companyname_tds = soup.find_all('td', class_='_1Y-2cHme') #列が一列だけだからいきなりtdタグを取得してもややこしくならない。
        company_name=data_companyname_tds[5].text
        #foreign_demand
        time.sleep(INTERVAL_TIME_SHORT)
        data_foreigndemand_tds = soup.find_all('td', class_='_1Y-2cHme')  #列が一列だけだからいきなりtdタグを取得してもややこしくならない。
        data_foreigndemand_alltext=data_foreigndemand_tds[1].text
        idx = data_foreigndemand_alltext.find('【海外】')
        data_foreigndemand_date = data_foreigndemand_alltext[idx+len('【海外】'):]
        foreign_demand_group=re.search(r'(\d+)\D+.+' , data_foreigndemand_date)
        if idx ==-1:
            print('foreign_demand_nakatta')                                            ###print
            foreign_demand='na'
        else:
            foreign_demand=foreign_demand_group.group(1)
        #type_of_industry
        time.sleep(INTERVAL_TIME_SHORT)
        data_typeofindustry_tds = soup.find_all('td', class_='_1Y-2cHme') #列が一列だけだからいきなりtdタグを取得してもややこしくならない。
        if data_typeofindustry_tds:                                      #if構文はエラー対策。
            type_of_industry=data_typeofindustry_tds[4].text
        else:
            print('type_of_industry_not_well_get')
            type_of_industry='na'
        #type_of_market
        time.sleep(INTERVAL_TIME_SHORT)
        data_typeofmarket_tds = soup.find_all('td', class_='_1Y-2cHme')
        if data_typeofmarket_tds:                                           #if構文はエラー対策。
            data_typeofmarket_alltext=data_typeofmarket_tds[8].text
            type_of_market_group=re.search(r'プライム|スタンダード|グロース', data_typeofmarket_alltext)
            if type_of_market_group:                                           #if構文はエラー対策。
                type_of_market=type_of_market_group.group()
            else:
                print('type_of_market_not_well_get_2')
                type_of_market='na'
        else:
            print('type_of_market_not_well_get')
            type_of_market='na'
        #accounting_period
        time.sleep(INTERVAL_TIME_SHORT)
        data_accountingperiod_tds = soup.find_all('td', class_='_1Y-2cHme')
        if data_accountingperiod_tds:                                           #if構文はエラー対策。
            data_accountingperiod_alltext=data_accountingperiod_tds[10].text
            accounting_period_group=re.search('\d+\D+', data_accountingperiod_alltext)
            if accounting_period_group:                                           #if構文はエラー対策。
                accounting_period=accounting_period_group.group()
            else:
                print('accounting_period_not_well_get_2')
                accounting_period='na'
        else:
            print('accounting_period_well_get')
            accounting_period='na'
        #########################################################################################################
        #equity_ratio
        time.sleep(INTERVAL_TIME)
        page_equityratio = "https://www.nikkei.com/nkd/company/kessan/?scode="+meigara+"&ba=1"
        driver_equityratio=get_driver()
        source_equityratio=get_source_from_page(driver_equityratio, page_equityratio)
        soup = bs4.BeautifulSoup(source_equityratio, features='lxml')
        #equity_ratio
        time.sleep(INTERVAL_TIME_SHORT)
        table_equityratio=soup.find_all('table', class_='w668')
        if table_equityratio:                                                 #if構文はエラー対策。   
            trs_equityratio=table_equityratio[2].find_all('tr')
            if trs_equityratio:                                                   #if構文はエラー対策。
                tds_equityratio=trs_equityratio[4].find_all('td')
                tds_head_equityratio=trs_equityratio[0].find_all('td')
                if tds_equityratio:
                    td_counter=-1
                    for td_head_equityratio in tds_head_equityratio :
                        td_counter=td_counter+1
                        td_head_year_equityratio_mae=re.search(r'2016|2017|2018|2019|2020|2021|2022', td_head_equityratio.text)
                        if td_head_year_equityratio_mae:
                            td_head_year_equityratio=td_head_year_equityratio_mae.group()
                            if str(td_head_year_equityratio)==str(event_year):
                                equity_ratio=extract_num(tds_equityratio[td_counter].text)
                                break
                            else:                                                  #目的の年代が取得できないならば、最も古いデータを取得。
                                equity_ratio=extract_num(tds_equityratio[0].text)
                        else:
                            print('equity_ratio_not_well_get_4')
                            equity_ratio='na'
                else:
                    print('equity_ratio_not_well_get_3')
                    equity_ratio='na'
            else:
                print('equity_ratio_not_well_get_2')
                equity_ratio='na'
        else:
            print('equity_ratio_not_well_get_1')
            equity_ratio='na'
        #########################################################################################################
        #per, pbr
        perpbr_minkabu_flg=True
        while perpbr_minkabu_flg==True:
            time.sleep(INTERVAL_TIME)
            page_perpbr = "https://minkabu.jp/stock/"+meigara+"/daily_valuation?page="+str(try_page_at_minkabu_perpbr)
            driver_perpbr=get_driver()
            source_perpbr=get_source_from_page(driver_perpbr, page_perpbr)
            soup = bs4.BeautifulSoup(source_perpbr, features='lxml')
            #per, pbr
            #table_perpbr=soup.find_all('table', class_='md_table')     #class名が'md_table fsize_s'でも取得してしまう。
            table_perpbr=soup.select("[class='md_table']")
            if table_perpbr:                                                 #if構文はエラー対策。   
                trs_perpbr=table_perpbr[0].find_all('tr')
                if trs_perpbr:                                                   #if構文はエラー対策。
                    tds_perpbr_head=trs_perpbr[1].find_all('td')
                    tds_perpbr_tail=trs_perpbr[20].find_all('td')
                    date_head=re.sub('/', "", tds_perpbr_head[0].text)
                    date_tail=re.sub('/', "", tds_perpbr_tail[0].text)
                    if tds_perpbr_head:
                        if int(date_tail)<=int(event_day_for_minkabu) and int(event_day_for_minkabu)<=int(date_head):
                            perpbr_counter=0
                            per_list=[]
                            pbr_list=[]
                            trs_perpbr.pop(0)#列名を示している一番上の行は、thタグ。
                            for tr_perpbr in trs_perpbr:
                                tds_perpbr=tr_perpbr.find_all('td')
                                if tds_perpbr:
                                    date=re.sub('/', "", tds_perpbr[0].text)
                                    if int(date)<=int(event_day_for_minkabu):
                                        perpbr_counter=perpbr_counter+1
                                        per_list.append(extract_num(tds_perpbr[2].text))
                                        pbr_list.append(extract_num(tds_perpbr[3].text))
                                    else:
                                        nanimosinai=0
                                else:
                                    print('perpbr_not_well_get_4')
                                    per='na'
                                    pbr='na'
                                    perpbr_minkabu_flg=False
                            #次のページで残りのデータを取得。
                            time.sleep(INTERVAL_TIME)
                            page_perpbr = "https://minkabu.jp/stock/"+meigara+"/daily_valuation?page="+str(try_page_at_minkabu_perpbr+1)
                            driver_perpbr=get_driver()
                            source_perpbr=get_source_from_page(driver_perpbr, page_perpbr)
                            soup = bs4.BeautifulSoup(source_perpbr, features='lxml')
                            table_perpbr=soup.find_all('table', class_='md_table')
                            if table_perpbr:
                                trs_perpbr=table_perpbr[0].find_all('tr')
                                if trs_perpbr:
                                    trs_perpbr.pop(0)#列名を示している一番上の行は、thタグ。
                                    for tr_perpbr in trs_perpbr:
                                        perpbr_counter=perpbr_counter+1
                                        tds_perpbr=tr_perpbr.find_all('td')
                                        if tds_perpbr:
                                            per_list.append(extract_num(tds_perpbr[2].text))
                                            pbr_list.append(extract_num(tds_perpbr[3].text))
                                            if perpbr_counter==31:#30日間のデータを取得するということ。
                                                break
                                        else:
                                            print('perpbr_not_well_get_7')
                                            per='na'
                                            pbr='na'
                                            perpbr_minkabu_flg=False
                                    perpbr_minkabu_flg=False
                                    per=sum(list(map(float, per_list)))/len(list(map(float, per_list)))
                                    pbr=sum(list(map(float, pbr_list)))/len(list(map(float, pbr_list)))
                                else:
                                    print('perpbr_not_well_get_6')
                                    per='na'
                                    pbr='na'
                                    perpbr_minkabu_flg=False
                            else:
                                print('perpbr_not_well_get_5')
                                per='na'
                                pbr='na'
                                perpbr_minkabu_flg=False
                        elif int(date_head)<int(event_day_for_minkabu):
                            try_page_at_minkabu_perpbr=try_page_at_minkabu_perpbr-1
                            perpbr_minkabu_flg=True
                        elif int(event_day_for_minkabu)<int(date_tail):
                            try_page_at_minkabu_perpbr=try_page_at_minkabu_perpbr+1
                            perpbr_minkabu_flg=True
                    else:
                        print('perpbr_not_well_get_3')
                        per='na'
                        pbr='na'
                        perpbr_minkabu_flg=False
                else:
                    print('perpbr_not_well_get_2')
                    per='na'
                    pbr='na'
                    perpbr_minkabu_flg=False
            else:
                print('perpbr_not_well_get_1')
                per='na'
                pbr='na'
                perpbr_minkabu_flg=False
        #########################################################################################################
        #jikasougaku, baibai
        time.sleep(INTERVAL_TIME)
        page_perpbr = "https://finance.yahoo.co.jp/quote/" + meigara + ".T"
        driver_perpbr=get_driver()
        source_perpbr=get_source_from_page(driver_perpbr, page_perpbr)
        soup = bs4.BeautifulSoup(source_perpbr, features='lxml')
        #jikasougaku
        time.sleep(INTERVAL_TIME_SHORT)
        ul_jikasougaku=soup.find_all('ul', class_='PQ9Z_PS3')
        lis_jikasougaku=ul_jikasougaku[0].find_all('li')
        dd_jikasougaku=lis_jikasougaku[0].find_all('dd', class_='_1m_13krb')
        jikasougaku_text=dd_jikasougaku[0].text
        jikasougaku_num_group=re.search(r'^(0|[1-9]\d*|[1-9]\d{0,2}(,\d{3})+)百万円', jikasougaku_text)
        if jikasougaku_num_group:                                         #jikasougakuがない会社を除外するために。
            jikasougaku=jikasougaku_num_group.group(1)
        else:
            print('jikasougaku_nakatta')                                           ###print
            jikasougaku='na'
        #baibai
        time.sleep(INTERVAL_TIME_SHORT)
        dls_baibai=soup.find_all('dl', class_='_38iJU1zx _3Quzw23Q')
        dd_baibai=dls_baibai[5].find_all('dd', class_='_1m_13krb')
        baibai_text=dd_baibai[0].text
        baibai_num_group=re.search(r'^(0|[1-9]\d*|[1-9]\d{0,2}(,\d{3})+)千円', baibai_text)
        if baibai_num_group:                                         #jikasougakuがない会社を除外するために。
            baibai=baibai_num_group.group(1)
        else:
            print('baibai_nakatta')                                           ###print
            baibai='na'
        ######################################################################################
        ######################################################################################
        ######################################################################################
        if date_and_stockprice_of_one_meigara!=[]:
            print(date_and_stockprice_of_one_meigara)                                                                  ###print
            date_and_stockprice_of_one_meigara.reverse()  #date_and_stockprice_of_one_meigaraの順番を逆にしたい。
            for datum in date_and_stockprice_of_one_meigara:    #date_and_stockprice_of_one_meigara の行の繰り返し。
                datum.insert(0, meigara)
                index_k= index_k+1
                datum.insert(0, index_k)
                #予測変数
                datum.insert(2, company_name)
                datum.append(foreign_demand)
                datum.append(equity_ratio)
                datum.append(per)
                datum.append(pbr)
                datum.append(type_of_industry)
                datum.append(type_of_market)
                datum.append(accounting_period)
                datum.append(jikasougaku)#market_capitalization
                datum.append(baibai)#trading_value
                #データフレームに追加していく。
                print(datum)                                                                                            ###print
                df = df.append(pd.Series(datum, index=df.columns), ignore_index=True)    
        else:
            print('jikeiretu_data_not_well_get_2')
            meigaralist_error.append(meigara)
        
        #####################################
        #実行途中に確認するため。
        #最後のprint
        #pd.set_option('display.max_rows', 200) 
        #print(df)                                                                                                            ###print
        #取得不能な銘柄                                                                                                       
        print(meigaralist_error)                                                                                           ###print
        
    driver.quit()
    

    #最後のprint
    pd.set_option('display.max_rows', 200) 
    print(df)                                                                                                            ###print
    
    #取得不能な銘柄                                                                                                       
    print(meigaralist_error)                                                                                       ###print
    df_error_company = pd.DataFrame({
        'error_company_name': meigaralist_error,
        })  
    df_error_company.to_csv('nikkei225/1/nikkei225_error_company_1.csv', encoding = encoding)                                                                                                  

    #csvに書く
    df.to_csv('nikkei225/1/nikkei225_1.csv', encoding = encoding) 




